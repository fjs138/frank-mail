'use strict';

var _workerUtils = require('./worker-utils');

var _tls = require('./tls');

var _tls2 = _interopRequireDefault(_tls);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tls = new _tls2.default();
tls.tlserror = function (message) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_ERROR, message));
};
tls.tlscert = function (cert) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_CERT, cert));
};
tls.tlsclose = function () {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_CLOSE));
};
tls.tlsopen = function () {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_OPEN));
};
tls.tlsoutbound = function (buffer) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_OUTBOUND, buffer), [buffer]);
};
tls.tlsinbound = function (buffer) {
  return self.postMessage((0, _workerUtils.createMessage)(_workerUtils.EVENT_INBOUND, buffer), [buffer]);
};

self.onmessage = function (_ref) {
  var _ref$data = _ref.data,
      event = _ref$data.event,
      message = _ref$data.message;

  switch (event) {
    case _workerUtils.EVENT_INBOUND:
      tls.processInbound(message);
      break;
    case _workerUtils.EVENT_OUTBOUND:
      tls.prepareOutbound(message);
      break;
    case _workerUtils.EVENT_HANDSHAKE:
      tls.handshake();
      break;
    case _workerUtils.EVENT_CONFIG:
      tls.configure(message);
      break;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90bHMtd29ya2VyLmpzIl0sIm5hbWVzIjpbInRscyIsInRsc2Vycm9yIiwic2VsZiIsInBvc3RNZXNzYWdlIiwibWVzc2FnZSIsInRsc2NlcnQiLCJjZXJ0IiwidGxzY2xvc2UiLCJ0bHNvcGVuIiwidGxzb3V0Ym91bmQiLCJidWZmZXIiLCJ0bHNpbmJvdW5kIiwib25tZXNzYWdlIiwiZGF0YSIsImV2ZW50IiwicHJvY2Vzc0luYm91bmQiLCJwcmVwYXJlT3V0Ym91bmQiLCJoYW5kc2hha2UiLCJjb25maWd1cmUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBUUE7Ozs7OztBQUVBLElBQUlBLE1BQU0sbUJBQVY7QUFDQUEsSUFBSUMsUUFBSixHQUFlO0FBQUEsU0FBV0MsS0FBS0MsV0FBTCxDQUFpQiwwREFBMkJDLE9BQTNCLENBQWpCLENBQVg7QUFBQSxDQUFmO0FBQ0FKLElBQUlLLE9BQUosR0FBYztBQUFBLFNBQVFILEtBQUtDLFdBQUwsQ0FBaUIseURBQTBCRyxJQUExQixDQUFqQixDQUFSO0FBQUEsQ0FBZDtBQUNBTixJQUFJTyxRQUFKLEdBQWU7QUFBQSxTQUFNTCxLQUFLQyxXQUFMLENBQWlCLHlEQUFqQixDQUFOO0FBQUEsQ0FBZjtBQUNBSCxJQUFJUSxPQUFKLEdBQWM7QUFBQSxTQUFNTixLQUFLQyxXQUFMLENBQWlCLHdEQUFqQixDQUFOO0FBQUEsQ0FBZDtBQUNBSCxJQUFJUyxXQUFKLEdBQWtCO0FBQUEsU0FBVVAsS0FBS0MsV0FBTCxDQUFpQiw2REFBOEJPLE1BQTlCLENBQWpCLEVBQXdELENBQUNBLE1BQUQsQ0FBeEQsQ0FBVjtBQUFBLENBQWxCO0FBQ0FWLElBQUlXLFVBQUosR0FBaUI7QUFBQSxTQUFVVCxLQUFLQyxXQUFMLENBQWlCLDREQUE2Qk8sTUFBN0IsQ0FBakIsRUFBdUQsQ0FBQ0EsTUFBRCxDQUF2RCxDQUFWO0FBQUEsQ0FBakI7O0FBRUFSLEtBQUtVLFNBQUwsR0FBaUIsZ0JBQXdDO0FBQUEsdUJBQTVCQyxJQUE0QjtBQUFBLE1BQXBCQyxLQUFvQixhQUFwQkEsS0FBb0I7QUFBQSxNQUFiVixPQUFhLGFBQWJBLE9BQWE7O0FBQ3ZELFVBQVFVLEtBQVI7QUFDRTtBQUNFZCxVQUFJZSxjQUFKLENBQW1CWCxPQUFuQjtBQUNBO0FBQ0Y7QUFDRUosVUFBSWdCLGVBQUosQ0FBb0JaLE9BQXBCO0FBQ0E7QUFDRjtBQUNFSixVQUFJaUIsU0FBSjtBQUNBO0FBQ0Y7QUFDRWpCLFVBQUlrQixTQUFKLENBQWNkLE9BQWQ7QUFDQTtBQVpKO0FBY0QsQ0FmRCIsImZpbGUiOiJ0bHMtd29ya2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRVZFTlRfSEFORFNIQUtFLFxuICBFVkVOVF9JTkJPVU5ELCBFVkVOVF9PVVRCT1VORCxcbiAgRVZFTlRfT1BFTiwgRVZFTlRfQ0xPU0UsXG4gIEVWRU5UX0NPTkZJRywgRVZFTlRfQ0VSVCxcbiAgRVZFTlRfRVJST1IsXG4gIGNyZWF0ZU1lc3NhZ2Vcbn0gZnJvbSAnLi93b3JrZXItdXRpbHMnXG5pbXBvcnQgVExTIGZyb20gJy4vdGxzJ1xuXG52YXIgdGxzID0gbmV3IFRMUygpXG50bHMudGxzZXJyb3IgPSBtZXNzYWdlID0+IHNlbGYucG9zdE1lc3NhZ2UoY3JlYXRlTWVzc2FnZShFVkVOVF9FUlJPUiwgbWVzc2FnZSkpXG50bHMudGxzY2VydCA9IGNlcnQgPT4gc2VsZi5wb3N0TWVzc2FnZShjcmVhdGVNZXNzYWdlKEVWRU5UX0NFUlQsIGNlcnQpKVxudGxzLnRsc2Nsb3NlID0gKCkgPT4gc2VsZi5wb3N0TWVzc2FnZShjcmVhdGVNZXNzYWdlKEVWRU5UX0NMT1NFKSlcbnRscy50bHNvcGVuID0gKCkgPT4gc2VsZi5wb3N0TWVzc2FnZShjcmVhdGVNZXNzYWdlKEVWRU5UX09QRU4pKVxudGxzLnRsc291dGJvdW5kID0gYnVmZmVyID0+IHNlbGYucG9zdE1lc3NhZ2UoY3JlYXRlTWVzc2FnZShFVkVOVF9PVVRCT1VORCwgYnVmZmVyKSwgW2J1ZmZlcl0pXG50bHMudGxzaW5ib3VuZCA9IGJ1ZmZlciA9PiBzZWxmLnBvc3RNZXNzYWdlKGNyZWF0ZU1lc3NhZ2UoRVZFTlRfSU5CT1VORCwgYnVmZmVyKSwgW2J1ZmZlcl0pXG5cbnNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24gKHsgZGF0YTogeyBldmVudCwgbWVzc2FnZSB9IH0pIHtcbiAgc3dpdGNoIChldmVudCkge1xuICAgIGNhc2UgRVZFTlRfSU5CT1VORDpcbiAgICAgIHRscy5wcm9jZXNzSW5ib3VuZChtZXNzYWdlKVxuICAgICAgYnJlYWtcbiAgICBjYXNlIEVWRU5UX09VVEJPVU5EOlxuICAgICAgdGxzLnByZXBhcmVPdXRib3VuZChtZXNzYWdlKVxuICAgICAgYnJlYWtcbiAgICBjYXNlIEVWRU5UX0hBTkRTSEFLRTpcbiAgICAgIHRscy5oYW5kc2hha2UoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlIEVWRU5UX0NPTkZJRzpcbiAgICAgIHRscy5jb25maWd1cmUobWVzc2FnZSlcbiAgICAgIGJyZWFrXG4gIH1cbn1cbiJdfQ==