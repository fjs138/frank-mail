'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (response, asArray, isLogging) {
  var respParts = [];
  var resp = (response.tag || '') + (response.command ? ' ' + response.command : '');
  var needsSpace = true;

  var walk = function walk(node) {
    if (resp.length > 0 && needsSpace) {
      resp += ' ';
    }

    if (Array.isArray(node)) {
      needsSpace = false;
      resp += '(';
      node.forEach(walk);
      resp += ')';
      return;
    } else {
      needsSpace = true;
    }

    if (!node && typeof node !== 'string' && typeof node !== 'number') {
      resp += 'NIL';
      return;
    }

    if (typeof node === 'string') {
      if (isLogging && node.length > 20) {
        resp += '"(* ' + node.length + 'B string *)"';
      } else {
        resp += JSON.stringify(node);
      }
      return;
    }

    if (typeof node === 'number') {
      resp += Math.round(node) || 0; // Only integers allowed
      return;
    }

    if (isLogging && node.sensitive) {
      resp += '"(* value hidden *)"';
      return;
    }

    switch (node.type.toUpperCase()) {
      case 'LITERAL':
        if (isLogging) {
          resp += '"(* ' + node.value.length + 'B literal *)"';
        } else {
          if (!node.value) {
            resp += '{0}\r\n';
          } else {
            resp += '{' + node.value.length + '}\r\n';
          }
          respParts.push(resp);
          resp = node.value || '';
        }
        break;

      case 'STRING':
        if (isLogging && node.value.length > 20) {
          resp += '"(* ' + node.value.length + 'B string *)"';
        } else {
          resp += JSON.stringify(node.value || '');
        }
        break;
      case 'TEXT':
      case 'SEQUENCE':
        resp += node.value || '';
        break;

      case 'NUMBER':
        resp += node.value || 0;
        break;

      case 'ATOM':
      case 'SECTION':
        var val = node.value || '';

        if ((0, _formalSyntax.verify)(val.charAt(0) === '\\' ? val.substr(1) : val, (0, _formalSyntax.ATOM_CHAR)()) >= 0) {
          val = JSON.stringify(val);
        }

        resp += val;

        if (node.section) {
          resp += '[';
          if (node.section.length) {
            needsSpace = false;
            node.section.forEach(walk);
          }
          resp += ']';
        }
        if (node.partial) {
          resp += '<' + node.partial.join('.') + '>';
        }
        break;
    }
  };

  [].concat(response.attributes || []).forEach(walk);

  if (resp.length) {
    respParts.push(resp);
  }

  return asArray ? respParts : respParts.join('');
};

var _formalSyntax = require('./formal-syntax');

;

/**
 * Compiles an input object into
 */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21waWxlci5qcyJdLCJuYW1lcyI6WyJyZXNwb25zZSIsImFzQXJyYXkiLCJpc0xvZ2dpbmciLCJyZXNwUGFydHMiLCJyZXNwIiwidGFnIiwiY29tbWFuZCIsIm5lZWRzU3BhY2UiLCJ3YWxrIiwibm9kZSIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJKU09OIiwic3RyaW5naWZ5IiwiTWF0aCIsInJvdW5kIiwic2Vuc2l0aXZlIiwidHlwZSIsInRvVXBwZXJDYXNlIiwidmFsdWUiLCJwdXNoIiwidmFsIiwiY2hhckF0Iiwic3Vic3RyIiwic2VjdGlvbiIsInBhcnRpYWwiLCJqb2luIiwiY29uY2F0IiwiYXR0cmlidXRlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2tCQUtlLFVBQVVBLFFBQVYsRUFBb0JDLE9BQXBCLEVBQTZCQyxTQUE3QixFQUF3QztBQUNyRCxNQUFJQyxZQUFZLEVBQWhCO0FBQ0EsTUFBSUMsT0FBTyxDQUFDSixTQUFTSyxHQUFULElBQWdCLEVBQWpCLEtBQXdCTCxTQUFTTSxPQUFULEdBQW1CLE1BQU1OLFNBQVNNLE9BQWxDLEdBQTRDLEVBQXBFLENBQVg7QUFDQSxNQUFJQyxhQUFhLElBQWpCOztBQUVBLE1BQUlDLE9BQU8sU0FBUEEsSUFBTyxDQUFVQyxJQUFWLEVBQWdCO0FBQ3pCLFFBQUlMLEtBQUtNLE1BQUwsR0FBYyxDQUFkLElBQW1CSCxVQUF2QixFQUFtQztBQUNqQ0gsY0FBUSxHQUFSO0FBQ0Q7O0FBRUQsUUFBSU8sTUFBTUMsT0FBTixDQUFjSCxJQUFkLENBQUosRUFBeUI7QUFDdkJGLG1CQUFhLEtBQWI7QUFDQUgsY0FBUSxHQUFSO0FBQ0FLLFdBQUtJLE9BQUwsQ0FBYUwsSUFBYjtBQUNBSixjQUFRLEdBQVI7QUFDQTtBQUNELEtBTkQsTUFNTztBQUNMRyxtQkFBYSxJQUFiO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDRSxJQUFELElBQVMsT0FBT0EsSUFBUCxLQUFnQixRQUF6QixJQUFxQyxP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SUFBVixDQUFlbEIsSUFBZjtBQUNEOztBQUVELFNBQU9ILFVBQVVFLFNBQVYsR0FBc0JBLFVBQVV5QixJQUFWLENBQWUsRUFBZixDQUE3QjtBQUNELEM7O0FBaEhEOztBQWdIQzs7QUE5R0QiLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBVE9NX0NIQVIsIHZlcmlmeSB9IGZyb20gJy4vZm9ybWFsLXN5bnRheCdcblxuLyoqXG4gKiBDb21waWxlcyBhbiBpbnB1dCBvYmplY3QgaW50b1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocmVzcG9uc2UsIGFzQXJyYXksIGlzTG9nZ2luZykge1xuICBsZXQgcmVzcFBhcnRzID0gW11cbiAgbGV0IHJlc3AgPSAocmVzcG9uc2UudGFnIHx8ICcnKSArIChyZXNwb25zZS5jb21tYW5kID8gJyAnICsgcmVzcG9uc2UuY29tbWFuZCA6ICcnKVxuICBsZXQgbmVlZHNTcGFjZSA9IHRydWVcblxuICBsZXQgd2FsayA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKHJlc3AubGVuZ3RoID4gMCAmJiBuZWVkc1NwYWNlKSB7XG4gICAgICByZXNwICs9ICcgJ1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgICBuZWVkc1NwYWNlID0gZmFsc2VcbiAgICAgIHJlc3AgKz0gJygnXG4gICAgICBub2RlLmZvckVhY2god2FsaylcbiAgICAgIHJlc3AgKz0gJyknXG4gICAgICByZXR1cm5cbiAgICB9IGVsc2Uge1xuICAgICAgbmVlZHNTcGFjZSA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoIW5vZGUgJiYgdHlwZW9mIG5vZGUgIT09ICdzdHJpbmcnICYmIHR5cGVvZiBub2RlICE9PSAnbnVtYmVyJykge1xuICAgICAgcmVzcCArPSAnTklMJ1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBub2RlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGlzTG9nZ2luZyAmJiBub2RlLmxlbmd0aCA+IDIwKSB7XG4gICAgICAgIHJlc3AgKz0gJ1wiKCogJyArIG5vZGUubGVuZ3RoICsgJ0Igc3RyaW5nICopXCInXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNwICs9IEpTT04uc3RyaW5naWZ5KG5vZGUpXG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5vZGUgPT09ICdudW1iZXInKSB7XG4gICAgICByZXNwICs9IE1hdGgucm91bmQobm9kZSkgfHwgMCAvLyBPbmx5IGludGVnZXJzIGFsbG93ZWRcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0xvZ2dpbmcgJiYgbm9kZS5zZW5zaXRpdmUpIHtcbiAgICAgIHJlc3AgKz0gJ1wiKCogdmFsdWUgaGlkZGVuICopXCInXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzd2l0Y2ggKG5vZGUudHlwZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdMSVRFUkFMJzpcbiAgICAgICAgaWYgKGlzTG9nZ2luZykge1xuICAgICAgICAgIHJlc3AgKz0gJ1wiKCogJyArIG5vZGUudmFsdWUubGVuZ3RoICsgJ0IgbGl0ZXJhbCAqKVwiJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghbm9kZS52YWx1ZSkge1xuICAgICAgICAgICAgcmVzcCArPSAnezB9XFxyXFxuJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNwICs9ICd7JyArIG5vZGUudmFsdWUubGVuZ3RoICsgJ31cXHJcXG4nXG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3BQYXJ0cy5wdXNoKHJlc3ApXG4gICAgICAgICAgcmVzcCA9IG5vZGUudmFsdWUgfHwgJydcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdTVFJJTkcnOlxuICAgICAgICBpZiAoaXNMb2dnaW5nICYmIG5vZGUudmFsdWUubGVuZ3RoID4gMjApIHtcbiAgICAgICAgICByZXNwICs9ICdcIigqICcgKyBub2RlLnZhbHVlLmxlbmd0aCArICdCIHN0cmluZyAqKVwiJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3AgKz0gSlNPTi5zdHJpbmdpZnkobm9kZS52YWx1ZSB8fCAnJylcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnVEVYVCc6XG4gICAgICBjYXNlICdTRVFVRU5DRSc6XG4gICAgICAgIHJlc3AgKz0gbm9kZS52YWx1ZSB8fCAnJ1xuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdOVU1CRVInOlxuICAgICAgICByZXNwICs9IChub2RlLnZhbHVlIHx8IDApXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ0FUT00nOlxuICAgICAgY2FzZSAnU0VDVElPTic6XG4gICAgICAgIGxldCB2YWwgPSBub2RlLnZhbHVlIHx8ICcnXG5cbiAgICAgICAgaWYgKHZlcmlmeSh2YWwuY2hhckF0KDApID09PSAnXFxcXCcgPyB2YWwuc3Vic3RyKDEpIDogdmFsLCBBVE9NX0NIQVIoKSkgPj0gMCkge1xuICAgICAgICAgIHZhbCA9IEpTT04uc3RyaW5naWZ5KHZhbClcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3AgKz0gdmFsXG5cbiAgICAgICAgaWYgKG5vZGUuc2VjdGlvbikge1xuICAgICAgICAgIHJlc3AgKz0gJ1snXG4gICAgICAgICAgaWYgKG5vZGUuc2VjdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIG5lZWRzU3BhY2UgPSBmYWxzZVxuICAgICAgICAgICAgbm9kZS5zZWN0aW9uLmZvckVhY2god2FsaylcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzcCArPSAnXSdcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5wYXJ0aWFsKSB7XG4gICAgICAgICAgcmVzcCArPSAnPCcgKyBub2RlLnBhcnRpYWwuam9pbignLicpICsgJz4nXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH07XG5cbiAgW10uY29uY2F0KHJlc3BvbnNlLmF0dHJpYnV0ZXMgfHwgW10pLmZvckVhY2god2FsaylcblxuICBpZiAocmVzcC5sZW5ndGgpIHtcbiAgICByZXNwUGFydHMucHVzaChyZXNwKVxuICB9XG5cbiAgcmV0dXJuIGFzQXJyYXkgPyByZXNwUGFydHMgOiByZXNwUGFydHMuam9pbignJylcbn07XG4iXX0=