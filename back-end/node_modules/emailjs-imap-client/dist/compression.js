"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Compressor;

var _zstream = _interopRequireDefault(require("pako/lib/zlib/zstream"));

var _deflate = require("pako/lib/zlib/deflate");

var _inflate = require("pako/lib/zlib/inflate");

var _messages = _interopRequireDefault(require("pako/lib/zlib/messages.js"));

var _constants = require("pako/lib/zlib/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CHUNK_SIZE = 16384;
const WINDOW_BITS = 15;
/**
 * Handles de-/compression via #inflate() and #deflate(), calls you back via #deflatedReady() and #inflatedReady().
 * The chunk we get from deflater is actually a view of a 16kB arraybuffer, so we need to copy the relevant parts
 * memory to a new arraybuffer.
 */

function Compressor(inflatedReady, deflatedReady) {
  this.inflatedReady = inflatedReady;
  this.deflatedReady = deflatedReady;
  this._inflate = inflater(chunk => this.inflatedReady(chunk.buffer.slice(chunk.byteOffset, chunk.byteOffset + chunk.length)));
  this._deflate = deflater(chunk => this.deflatedReady(chunk.buffer.slice(chunk.byteOffset, chunk.byteOffset + chunk.length)));
}

Compressor.prototype.inflate = function (buffer) {
  this._inflate(new Uint8Array(buffer));
};

Compressor.prototype.deflate = function (buffer) {
  this._deflate(new Uint8Array(buffer));
};

function deflater(emit) {
  const stream = new _zstream.default();
  const status = (0, _deflate.deflateInit2)(stream, _constants.Z_DEFAULT_COMPRESSION, _constants.Z_DEFLATED, WINDOW_BITS, 8, _constants.Z_DEFAULT_STRATEGY);

  if (status !== _constants.Z_OK) {
    throw new Error('Problem initializing deflate stream: ' + _messages.default[status]);
  }

  return function (data) {
    if (data === undefined) return emit(); // Attach the input data

    stream.input = data;
    stream.next_in = 0;
    stream.avail_in = stream.input.length;
    let status;
    let output;
    let start;
    let ret = true;

    do {
      // When the stream gets full, we need to create new space.
      if (stream.avail_out === 0) {
        stream.output = new Uint8Array(CHUNK_SIZE);
        start = stream.next_out = 0;
        stream.avail_out = CHUNK_SIZE;
      } // Perform the deflate


      status = (0, _deflate.deflate)(stream, _constants.Z_SYNC_FLUSH);

      if (status !== _constants.Z_STREAM_END && status !== _constants.Z_OK) {
        throw new Error('Deflate problem: ' + _messages.default[status]);
      } // If the output buffer got full, flush the data.


      if (stream.avail_out === 0 && stream.next_out > start) {
        output = stream.output.subarray(start, start = stream.next_out);
        ret = emit(output);
      }
    } while ((stream.avail_in > 0 || stream.avail_out === 0) && status !== _constants.Z_STREAM_END); // Emit whatever is left in output.


    if (stream.next_out > start) {
      output = stream.output.subarray(start, start = stream.next_out);
      ret = emit(output);
    }

    return ret;
  };
}

function inflater(emit) {
  const stream = new _zstream.default();
  const status = (0, _inflate.inflateInit2)(stream, WINDOW_BITS);

  if (status !== _constants.Z_OK) {
    throw new Error('Problem initializing inflate stream: ' + _messages.default[status]);
  }

  return function (data) {
    if (data === undefined) return emit();
    let start;
    stream.input = data;
    stream.next_in = 0;
    stream.avail_in = stream.input.length;
    let status, output;
    let ret = true;

    do {
      if (stream.avail_out === 0) {
        stream.output = new Uint8Array(CHUNK_SIZE);
        start = stream.next_out = 0;
        stream.avail_out = CHUNK_SIZE;
      }

      status = (0, _inflate.inflate)(stream, _constants.Z_NO_FLUSH);

      if (status !== _constants.Z_STREAM_END && status !== _constants.Z_OK) {
        throw new Error('inflate problem: ' + _messages.default[status]);
      }

      if (stream.next_out) {
        if (stream.avail_out === 0 || status === _constants.Z_STREAM_END) {
          output = stream.output.subarray(start, start = stream.next_out);
          ret = emit(output);
        }
      }
    } while (stream.avail_in > 0 && status !== _constants.Z_STREAM_END);

    if (stream.next_out > start) {
      output = stream.output.subarray(start, start = stream.next_out);
      ret = emit(output);
    }

    return ret;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,