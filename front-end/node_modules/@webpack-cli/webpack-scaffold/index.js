"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jscodeshift = require("jscodeshift");
/* eslint-disable @typescript-eslint/no-explicit-any */
function createArrowFunction(value) {
    return `() => '${value}'`;
}
exports.createArrowFunction = createArrowFunction;
function createRegularFunction(value) {
    return `function () {\n return '${value}'\n}`;
}
exports.createRegularFunction = createRegularFunction;
function createDynamicPromise(arrOrString) {
    if (Array.isArray(arrOrString)) {
        return ("() => new Promise((resolve) => resolve([" +
            arrOrString.map((func) => {
                return "'" + func + "'";
            }) +
            "]))");
    }
    else {
        return `() => new Promise((resolve) => resolve('${arrOrString}'))`;
    }
}
exports.createDynamicPromise = createDynamicPromise;
function createAssetFilterFunction(value) {
    return `function (assetFilename) {\n return assetFilename.endsWith('.${value}');\n}`;
}
exports.createAssetFilterFunction = createAssetFilterFunction;
function createExternalFunction(regexp) {
    return ("\n function (context, request, callback) {\n if (" +
        "/" +
        regexp +
        "/.test(request)){" +
        "\n" +
        "   return callback(null, 'commonjs' + request);\n}\n" +
        "callback();\n}");
}
exports.createExternalFunction = createExternalFunction;
function parseValue(regexp) {
    return jscodeshift(regexp);
}
exports.parseValue = parseValue;
function createRequire(val) {
    return `const ${val} = require('${val}');`;
}
exports.createRequire = createRequire;
function List(self, name, message, choices, defaultChoice, skip = false) {
    if (skip)
        return { [name]: defaultChoice };
    return self.prompt([
        {
            choices,
            message,
            name,
            type: "list",
            default: defaultChoice
        }
    ]);
}
exports.List = List;
function RawList(name, message, choices) {
    return {
        choices,
        message,
        name,
        type: "rawlist"
    };
}
exports.RawList = RawList;
function CheckList(name, message, choices) {
    return {
        choices,
        message,
        name,
        type: "checkbox"
    };
}
exports.CheckList = CheckList;
function Input(self, name, message, defaultChoice, skip = false) {
    if (skip)
        return { [name]: defaultChoice };
    return self.prompt([
        {
            default: defaultChoice,
            message,
            name,
            type: "input"
        }
    ]);
}
exports.Input = Input;
function InputValidate(self, name, message, cb, defaultChoice, skip) {
    if (skip)
        return { [name]: defaultChoice };
    const input = {
        message,
        name,
        type: "input",
        validate: cb
    };
    if (defaultChoice)
        input.default = defaultChoice;
    return self.prompt([input]);
}
exports.InputValidate = InputValidate;
function Confirm(self, name, message, defaultChoice = true, skip = false) {
    if (skip)
        return { [name]: defaultChoice };
    return self.prompt([
        {
            default: defaultChoice,
            message,
            name,
            type: "confirm"
        }
    ]);
}
exports.Confirm = Confirm;
// TODO: to understand this type
// eslint-disable-next-line
function AutoComplete(name, message, options = {}) {
    return Object.assign({
        message,
        name,
        type: "autocomplete"
    }, options);
}
exports.AutoComplete = AutoComplete;
//# sourceMappingURL=index.js.map